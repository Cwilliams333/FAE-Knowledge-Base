name: Enhanced CI/CD for Microservices

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run linting
      run: |
        # Add your linting commands here
        echo "Linting checks would go here"
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # black --check .
        
  # Job 2: Unit Tests (Fast)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        # Run unit tests with mocks (no containers needed)
        python -m pytest tests/unit/ -v --tb=short --cov=app --cov-report=xml || echo "Unit tests not yet implemented"
        
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unit-tests
        
  # Job 3: Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      ingest-image: ${{ steps.meta-ingest.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: backend:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Build ingest image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ingest
        push: false
        tags: ingest:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Build test runner image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        push: false
        tags: test-runner:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
  # Job 4: Integration Tests (Microservices)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    # Removed services section as we're using docker-compose.test.yml instead
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Run microservices integration tests
      env:
        TEST_ENV: ci
        API_BASE_URL: http://localhost:5000
        ES_HOST: http://localhost:9200
        INDEX_NAME: knowledge_base_test
        WITH_COVERAGE: true
      run: |
        # Build test images first
        docker compose -f docker-compose.test.yml build
        
        # Start Elasticsearch first and wait for it to be ready
        docker compose -f docker-compose.test.yml up -d elasticsearch
        
        # Wait for Elasticsearch to be healthy
        timeout 90s bash -c 'until docker compose -f docker-compose.test.yml exec -T elasticsearch curl -sf http://localhost:9200/_cluster/health?wait_for_status=yellow; do
          echo "Waiting for Elasticsearch...";
          sleep 5;
        done'
        
        # Start ingest service and wait for it to complete
        echo "Starting ingest service..."
        docker compose -f docker-compose.test.yml up ingest
        
        # Check ingest exit code
        INGEST_EXIT_CODE=$(docker wait ingest-test 2>/dev/null || echo "1")
        echo "Ingest completed with exit code: $INGEST_EXIT_CODE"
        
        if [ "$INGEST_EXIT_CODE" != "0" ]; then
          echo "✗ Ingest failed with exit code $INGEST_EXIT_CODE"
          docker compose -f docker-compose.test.yml logs ingest
          exit 1
        fi
        
        echo "✓ Ingest completed successfully"
        
        # Start backend service (will wait for ingest to complete due to depends_on)
        docker compose -f docker-compose.test.yml up -d backend
        
        # Wait for backend to be ready
        timeout 60s bash -c 'until docker compose -f docker-compose.test.yml exec -T backend python -c "import urllib.request; urllib.request.urlopen('\''http://localhost:5000/health'\'')"; do
          echo "Waiting for backend...";
          sleep 3;
        done'
        
        # Now run the test runner in detached mode first
        docker compose -f docker-compose.test.yml up -d test-runner
        
        # Wait for test runner to complete and capture exit code
        TEST_EXIT_CODE=0
        docker wait test-runner || TEST_EXIT_CODE=$?
        
        # Store the exit code for later
        echo "TEST_EXIT_CODE=${TEST_EXIT_CODE}" >> $GITHUB_ENV
        
        # Show test runner logs
        echo "Test runner logs:"
        docker compose -f docker-compose.test.yml logs test-runner
          
    - name: Copy test artifacts
      if: always()
      run: |
        # Check if test-runner container exists
        echo "=== Checking for test-runner container ==="
        docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep test-runner || echo "No test-runner container found"
        
        # Create artifacts directory
        mkdir -p test-artifacts
        
        # Try to copy test results and coverage from the test-runner container
        echo "=== Attempting to copy test artifacts ==="
        
        # Copy test-results.xml
        if docker cp test-runner:/app/test-results.xml ./test-artifacts/test-results.xml 2>/dev/null; then
          echo "✓ Successfully copied test-results.xml"
          cp ./test-artifacts/test-results.xml ./test-results.xml
        else
          echo "✗ No test-results.xml found in container"
        fi
        
        # Copy coverage.xml  
        if docker cp test-runner:/app/coverage.xml ./test-artifacts/coverage.xml 2>/dev/null; then
          echo "✓ Successfully copied coverage.xml"
          cp ./test-artifacts/coverage.xml ./coverage.xml
        else
          echo "✗ No coverage.xml found in container"
        fi
        
        # List what we found
        echo "=== Artifacts found ==="
        ls -la test-artifacts/ || echo "No artifacts directory"
        ls -la *.xml 2>/dev/null || echo "No XML files in current directory"
        
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: integration-tests
        
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && github.event_name == 'pull_request'
      with:
        files: |
          test-results.xml
          test-artifacts/test-results.xml
          **/test-results.xml
        check_name: Integration Test Results
        fail_on: nothing
      continue-on-error: true
        
    - name: Test Summary
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f test-results.xml ]; then
          echo "✅ Test results file generated" >> $GITHUB_STEP_SUMMARY
          # Try to extract basic info from junit xml
          if command -v xmllint &> /dev/null; then
            TESTS=$(xmllint --xpath "string(//testsuite/@tests)" test-results.xml 2>/dev/null || echo "?")
            FAILURES=$(xmllint --xpath "string(//testsuite/@failures)" test-results.xml 2>/dev/null || echo "?")
            ERRORS=$(xmllint --xpath "string(//testsuite/@errors)" test-results.xml 2>/dev/null || echo "?")
            echo "- Total tests: $TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: $FAILURES" >> $GITHUB_STEP_SUMMARY
            echo "- Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ No test results file found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Exit code: ${TEST_EXIT_CODE:-unknown}" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          test-results.xml
        if-no-files-found: warn
          
    - name: Check test results
      if: always()
      run: |
        echo "Test exit code: ${TEST_EXIT_CODE}"
        # Only fail if we have a non-zero exit code
        if [ "${TEST_EXIT_CODE}" != "0" ]; then
          echo "Tests failed with exit code ${TEST_EXIT_CODE}"
          exit ${TEST_EXIT_CODE}
        else
          echo "All tests passed!"
        fi
          
    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v --remove-orphans || true
        
  # Job 5: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Job 6: End-to-End Tests (Optional, on main branch)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run E2E tests
      env:
        TEST_ENV: ci
        WITH_COVERAGE: false
        PYTEST_MARKERS: e2e
      run: |
        # Build all images first to ensure they exist
        docker compose -f docker-compose.test.yml build
        
        # Use the same sequential startup that works in integration tests
        # Start Elasticsearch first and wait for it to be ready
        docker compose -f docker-compose.test.yml up -d elasticsearch
        
        # Wait for Elasticsearch to be healthy
        timeout 90s bash -c 'until docker compose -f docker-compose.test.yml exec -T elasticsearch curl -sf http://localhost:9200/_cluster/health?wait_for_status=yellow; do
          echo "Waiting for Elasticsearch...";
          sleep 5;
        done'
        
        # Start ingest service and wait for it to complete
        echo "Starting ingest service..."
        docker compose -f docker-compose.test.yml up ingest
        
        # Check ingest exit code
        INGEST_EXIT_CODE=$(docker wait ingest-test 2>/dev/null || echo "1")
        echo "Ingest completed with exit code: $INGEST_EXIT_CODE"
        
        if [ "$INGEST_EXIT_CODE" != "0" ]; then
          echo "✗ Ingest failed with exit code $INGEST_EXIT_CODE"
          docker compose -f docker-compose.test.yml logs ingest
          exit 1
        fi
        
        echo "✓ Ingest completed successfully"
        
        # Start backend service
        docker compose -f docker-compose.test.yml up -d backend
        
        # Wait for backend to be ready
        timeout 60s bash -c 'until docker compose -f docker-compose.test.yml exec -T backend python -c "import urllib.request; urllib.request.urlopen('\''http://localhost:5000/health'\'')"; do
          echo "Waiting for backend...";
          sleep 3;
        done'
        
        # Now run the test runner
        docker compose -f docker-compose.test.yml up \
          --abort-on-container-exit \
          --exit-code-from test-runner \
          test-runner
          
    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v --remove-orphans || true
        
  # Job 7: Deploy (Production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Production deployment would go here"
        # Add your deployment logic
        
  # Job 8: Notification
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [integration-tests, security]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.integration-tests.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed!"
        
    - name: Notify failure
      if: ${{ needs.integration-tests.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Some checks failed!"
        exit 1