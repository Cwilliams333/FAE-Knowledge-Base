name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main" ]

# Prevent duplicate runs and cancel in-progress runs on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        ES_HOST=http://elasticsearch:9200
        ES_USER=
        ES_PASSWORD=
        INDEX_NAME=knowledge_base_test
        DOCUMENTS_DIR=/app/documents
        FLASK_ENV=testing
        PORT=5000
        EOF
        
    - name: Build and start services
      run: |
        # Build production images first
        docker compose build
        
        # Start services with test configuration
        docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for Elasticsearch to be ready..."
        timeout 120s bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 5; done'
        
        echo "Waiting for Flask API to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:5000/health; do sleep 5; done'
        
    - name: Install backend test dependencies
      run: |
        docker compose exec -T web pip install -r requirements-dev.txt
        
    - name: Run backend tests
      run: |
        timeout 300s docker compose exec -T -e API_BASE_URL=http://localhost:5000 web python -m pytest tests/ -v --tb=short --timeout=120
        
    - name: Install frontend test dependencies (if not already installed)
      run: |
        docker compose exec -T frontend-dev npm install
        
    - name: Run frontend tests
      run: |
        timeout 180s docker compose exec -T frontend-dev npm test -- --run
        
    - name: Collect test logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Logs ==="
        docker compose logs
        
    - name: Clean up
      if: always()
      run: |
        docker compose down -v
        docker system prune -f

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/development'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for backend image
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend image
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image digests
      run: |
        echo "Backend image: ${{ steps.meta-backend.outputs.tags }}"
        echo "Frontend image: ${{ steps.meta-frontend.outputs.tags }}"